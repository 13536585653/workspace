1.JAVA里的集合
   集合是比数组更好用的数据类型。
  Array(数组),List(列表),Set(集)，Map(映像)

2. List 列表 (java.util.List , java.util.ArrayList)
  类似数组，但不限定大小，可以非常方便的添加数据，删除数据，替换数据等
 是一个有序的集合。 
 
     list里可以存放不同类型的元素。
     list在定义时，可以指定数据类型（泛型），指定了类型后的list只能存放指定类型的数据.
     
     list里可以存放重复的元素
     list里有下标，是有序的。
          指定泛型的list可以使用foreach输出【推荐写法】,也使用for
     
 
     List     接口
  ArrayList  List接口的实现类.    
  
    构造方法：
     ArrayList()      构造一个初始容量为 10 的空列表
   常用方法：
     add(E element)    --向列表里添加元素
     add(int index, E element)  将指定的元素插入此列表中的指定位置。
     clear()  ---移除此列表中的所有元素。
     get(int index)     返回此列表中指定位置上的元素。
     remove(int index)     移除此列表中指定位置上的元素
     size()    --   返回此列表中的元素数。
     isEmpty()     --如果此列表中没有元素，则返回 true
     indexOf(Object o)  
              --返回此列表中首次出现的指定元素的索引，或如果此列表不包含元素，则返回 -1。

3. Set(堆) java.util.Set 与  java.util.HashSet

   Set 接口    无序的集合，无下标，不可以存放相同的元素 ，也可以指定泛型.
   HashSet 实现类  
   Set输出，只能用foreach
   
   
      构造方法 ：
        HashSet<E>()  --创建一个空的set
     常用方法：
   boolean add(E e) 
              如果 set 中尚未存在指定的元素，则添加此元素（可选操作）。 
   void clear() 
          移除此 set 中的所有元素（可选操作）。 
   boolean contains(Object o) 
          如果 set 包含指定的元素，则返回 true。 
   boolean isEmpty() 
          如果 set 不包含元素，则返回 true。 
   boolean remove(Object o) 
          如果 set 中存在指定的元素，则将其移除（可选操作）。 
   int size() 
          返回 set 中的元素数（其容量）。 
       
4. Map 和 HashMap  (java.util.Map 和  java.util.HashMap)
    Map接口
    HashMap 实现类
    
    Map<k,v> 是按key-value（键值对）来存储数据的，key不能重复，value可以重复.
    可以非常方便的按key获取value.
    
    使用map存数据时，选择合适的key非常重要。 经常查找的字段，作为key。
    
    HashMap 
      构造方法：
        HashMap<K,V>(); ---创建一个新的HashMap,
    常用方法：
     void clear() 
                 从此映射中移除所有映射关系。 
     boolean containsKey(Object key) 
                  如果此映射包含对于指定键的映射关系，则返回 true。 
      V get(Object key)    
                 返回指定键所映射的值；
                  如果对于该键来说，此映射不包含任何映射关系，则返回 null。 
     boolean isEmpty() 
                 如果此映射不包含键-值映射关系，则返回 true。 
     Set<K> keySet() 
                  返回此映射中所包含的键的 Set 视图。 
     V put(K key, V value) 
          在此映射中关联指定值与指定键。 
     V remove(Object key) 
             从此映射中移除指定键的映射关系（如果存在）。 
     int size() 
              返回此映射中的键-值映射关系数。 


小结：
  数组： 固定大小，通过下标访问
 List: 大小可变，可存储重复的元素， 通过下标访问，可以使用foreach遍历
 Set : 大小可变，无下标，不可存储重复的元素，使用foreach遍历
 Map:  大小可变，存储的是key-value键值对，通过key获得对应的value
             可先获得全部 的key , 通过遍历key ,再获得每一个value
  
 List  -> ArrayList , LinkedList
 Set   -> HashSet  ,  TreeSet
 Map   -> HashMap  , LinkedHashMap
 
 
 5. 数组和list的排序
   
     数组的排序，可以使用Arrays类的静态方法sort()解决。
     static  void sort(数组)  --将数组排序
  
  list的排序 ,使用 Collections类 ，静态方法
   static void sort(List<T> list) 
           根据元素的自然顺序 对指定列表按升序进行排序。 
   static void reverse(List<?> list) 
                 反转指定列表中元素的顺序。         
    
   重点： 在排序时，一定要知道该怎么排，
     对象排序，需要对象实现Comparable接口，重写 int compareTo(Object o)方法

 


练习1.
  创建Student类，属性【姓名，年龄，性别】,编写get,set方法
  编写构造方法2个，编写toString方法
  编写测试类  ，在测试里，创建一个学员列表，添加3个学员，
  使用foreach循环，输出列表里的全部学员
 
 练习2：
   利用set产生不重复的7个数字,范围 [1-10]  
   Set<Integer> set

练习3：
   创建Employee类，属性【编号，姓名，年龄，职位】.编写get,set方法
  编写构造方法2个，编写toString方法
  编写测试类，创建5个员工，存入HashMap。该map以员工的编号作为key.
  找出编号为"000001"的员工信息。
  输出全部 员工信息。
  
练习4：
  创建一个list,存入4个学生，输出该list的大小，
  再从该list中，移除一个学生，再输出list的大小，并将该list中的全部学生输出 
  
练习5：
 创建一个set,存入4个学生，输出该set的大小，
  再从该set中，移除一个学生，再输出set的大小，并将该set中的全部学生输出 

练习6：
  创建一个 创建Employee类，属性【姓名，年龄，工资】.编写get,set方法
  编写构造方法2个，编写toString方法 ，
 Employee类 实现  Comparable 接口，要求按工资比较大小
  创建测试类，定义一个员工数组，将员工按工资大小，排序输出 
 
 练习7：
  在上题基础上，创建一个list ,存入3个员工，按工资大小，有高->低输出 
  
 
 


     
     