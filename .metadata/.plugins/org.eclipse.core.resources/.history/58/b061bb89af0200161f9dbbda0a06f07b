1. 正则表达式
       对字符串进行严格的匹配.
   如： 邮箱账号，电话号码，身份证号   
     041-74121458
     0756-1241221

2. 正则表达式的规则
     . 代表 单个任意字符    t.x --> tax, tbx, t5x, t*x   
    [abc] 代表单个字符是[]任意一个 t[abc]x  -> tax,tbx,tcx
    (|) 代表或者       t(o|oo|ooo)x ->tox,toox,tooox,
    * 代表 0次或多次  t(s*)x -> tx ,tsx,tsssx,tsssssx,
    + 代表1次或多次  t(s+)x -> tsx,tssssx,
    ? 代表0次或1次   t(s?)x  -> tx ,tsx 
    {n} 代表n次      t(s{3})x  ->tsssx 
    {m,n} 代表 m次到n次  t(s{3,5})x    -> tsssx,  tssssx, tsssssx
    ^  代表否     t[^s]x   --> ttx,
    \d  代表  [0-9]   t(\d)x ->t[0-9]x    ->   t0x ,t1x, t9x
    \D 代表[^0-9]
    \w 代表[a-zA-Z_0-9] t(\w)x  ->tax,tAx,t9x,t_x 
    ^ 行的开头   
    $ 行的结尾 
     
3. 规则举例

   电话号码规则（区号-号码 ,区号可以是3或4位，号码可以是7或8位）
     [0-9]{3,4}-[0-9]{7,8} 或   \d{3,4}-\d{7,8}   
     
  中国移动手机号码规则:
  以138,137,136,185,186开头的手机号
   ^1(38|37|36|85|86)([0-9]{8})
   
   邮箱规则:  9@adasd.c_9
        ^(\w)+@(\w)+(\.)(\w)+$
        
 4. 利用正则表达式，去匹配字符串 
   
   java.util.regex.Pattern 类
   
    静态方法
   static boolean matches(String regex, CharSequence input)  
      --参数1：正则表达式规则
      --参数2： 要检查的字符串
      --结果：true ，false
      
      
  5.字符串的分割
              将字符串分割成字符串数组
   
   String 类的 split方法          
   
   String[] split(String regex)  
       --参数：分割符 ，支持正则表达式
       --返回值：字符串数组
 
  
  
  
  
  
  练习1：
   编写一个18位身份证号码验证规则，(前17位为数字，最后一位是数字或x或X)
   测试输入一个身份证号码验证
    [0-9]{17}([0-9]|x|X)
    
   
 练习2： 
   假如有一串字符串"aaa,bbb ccc;ddd:eee"
   请把此字符串分割为aaa bbb bbb ddd eee
   
   
       
     
     
     