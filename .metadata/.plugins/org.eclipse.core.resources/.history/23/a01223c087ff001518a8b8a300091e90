 1.抽象方法
 一个方法，只有方法定义，没有方法体，就叫抽象方法
 抽象方法 使用abstract 修饰
     public  abstract  int f(int x,int y);
     
 2. 抽象类(abstract)
  含有抽象方法的类，叫抽象类。 
 抽象类必须使用  abstract 关键字  
 
   抽象类 不能 实例化 对象.
   抽象类就是让子类去继承的，并重写抽象方法。
  一个子类继承抽象类，那么必须重写父类的全部抽象方法
  如果没有重写，那么子类也必须声明为抽象类。
  
  由于，抽象类是不能实例化对象的。因此
  我们可以故意将一类定义为抽象类，从而不让它去实例化对象.
  
  含有抽象方法的类一定是抽象类。
  一个抽象类，不一定含有抽象方法。
  
  
  3. 接口(interface)
          接口很类似抽象类。
          接口里的方法，全部是抽象方法。
          接口不能实例化对象。
         要使用接口，必须写类去实现某个接口。implements
        一个类要实现一个接口，必须重写接口所定义的全部抽象方法。
        如果不全部实现，则该类为抽象类。
      
      
        一个类可以实现多个接口。   
         一个类可以实现多个接口，一个类只能继承一个类。
         
       接口在使用上，比类更灵活。接口用的更多。     
       
      
  综合案例(类，子类，抽象类，接口)：
     门，有开关功能。
     木门，铁门，防盗门 都有开关功能。
     报警器，有报警功能。
     车有启动功能，还有报警功能。  
     防盗门也有报警功能。   
    请用面向对象的思想，实现设计。
   1. 门 --抽象类， 抽象方法--开关功能
   2. 木门，铁门，防盗门都继承门类，并实现抽象方法.
   3. 车类。有启动功能
   4. 编写一个报警器，接口，里面有一个报警的抽象方法.
            
  
  
  
  
  
  